"use client";

import { useState, useEffect, ReactNode } from "react";
import { useRouter } from "next/navigation";
import { auth, db } from "@/lib/firebase";
import { doc, getDoc, updateDoc, increment } from "firebase/firestore";

interface Task {
  title: string;
  description: string;
  content: ReactNode;
  answer: ReactNode;
}

export default function CheckTasksPage({ pageId = "page1" }) {
  const [openTask, setOpenTask] = useState<number | null>(null);
  const [showAnswer, setShowAnswer] = useState<Record<string, boolean>>({});
  const [completed, setCompleted] = useState<Record<string, boolean>>({});
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  // üîπ Firestore-–¥–∞–Ω –∂“Ø–∫—Ç–µ—É
  useEffect(() => {
    const loadUserProgress = async () => {
      const user = auth.currentUser;
      if (!user) return;

      const userRef = doc(db, "users", user.uid);
      const snap = await getDoc(userRef);
      if (snap.exists()) {
        const data = snap.data();
        if (data.completedTasksList) {
          setCompleted(data.completedTasksList);
        }
      }
      setLoading(false);
    };
    loadUserProgress();
  }, []);

  const handleClick = () => {
    router.push("/topics/page2");
  };

  const toggleTask = (index: number) => {
    setOpenTask(openTask === index ? null : index);
  };

  // üîπ –¢–µ–∫—Å–µ—Ä—É –±–∞—Ç—ã—Ä–º–∞—Å—ã
  const handleCheck = async (index: number) => {
    const key = `${pageId}-${index}`;
    setShowAnswer((prev) => ({ ...prev, [key]: !prev[key] }));

    const user = auth.currentUser;
    if (!user) {
      alert("–ö—ñ—Ä—É “õ–∞–∂–µ—Ç!");
      router.push("/auth/sign_in");
      return;
    }

    const userRef = doc(db, "users", user.uid);

    if (!completed[key]) {
      const updated = { ...completed, [key]: true };
      await updateDoc(userRef, {
        completedTasks: increment(1),
        completedTasksList: updated,
      });
      setCompleted(updated);
    }
  };

  // üîπ –ù”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ —Ç–∞–∑–∞—Ä—Ç—É
  const handleResetResults = async () => {
    const user = auth.currentUser;
    if (!user) {
      alert("–ö—ñ—Ä—É “õ–∞–∂–µ—Ç!");
      router.push("/auth/sign_in");
      return;
    }

    const userRef = doc(db, "users", user.uid);
    await updateDoc(userRef, {
      completedTasks: 0,
      completedTasksList: {},
    });

    setCompleted({});
    setShowAnswer({});
    alert("–ë–∞—Ä–ª—ã“õ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä —Ç–∞–∑–∞—Ä—Ç—ã–ª–¥—ã ‚úÖ");
  };

  const tasks: Task[] = [
    {
      title: "1-—Ç–∞–ø—Å—ã—Ä–º–∞. ¬´–ñ“Ø–∑–µ–≥–µ –∞—Å—É—à—ã–ª—ã“õ “õ“±–π“ì—ã—Å—ã¬ª ”ô–¥—ñ—Å—ñ –∞—Ä“õ—ã–ª—ã –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã —Ç–∞–ø",
      description:
        "–ß–µ–∫—Ç—ñ –º“±“õ–∏—è—Ç “õ–∞—Ä–∞“£—ã–∑ –∂”ô–Ω–µ —Ç”©–º–µ–Ω–¥–µ–≥—ñ —Å“±—Ä–∞“õ—Ç–∞—Ä“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑.",
      content: (
        <div className="mt-2 text-sm">
          <ol className="list-decimal ml-5 space-y-3">
            <li>
              “ö–∞–π ”©–Ω—ñ–º –µ“£ “õ—ã–º–±–∞—Ç?
              <input className="w-full border rounded p-2 mt-1" />
            </li>
            <li>
              “ö–∞–π ”©–Ω—ñ–º –µ“£ –∞—Ä–∑–∞–Ω?
              <input className="w-full border rounded p-2 mt-1" />
            </li>
            <li>
              –ï–≥–µ—Ä —Å—ñ–∑–¥–µ –±–µ–ª–≥—ñ–ª—ñ –±—ñ—Ä –±—é–¥–∂–µ—Ç –±–æ–ª—Å–∞, “õ–∞–Ω–¥–∞–π ”©–Ω—ñ–º–¥–µ—Ä–¥—ñ —Å–∞—Ç—ã–ø –∞–ª–∞
              –∞–ª–∞—Å—ã–∑?  
              üëâ –¢—ñ–∑—ñ–º “õ“±—Ä—ã“£—ã–∑ –∂”ô–Ω–µ ”ô—Ä —Ç–∞“£–¥–∞—É—ã“£—ã–∑–¥—ã –Ω–µ–≥—ñ–∑–¥–µ“£—ñ–∑.
              <textarea className="w-full border rounded p-2 mt-1" rows={3} />
            </li>
          </ol>
        </div>
      ),
      answer: (
        <ul className="list-disc ml-5">
          <li>–ï“£ “õ—ã–º–±–∞—Ç ”©–Ω—ñ–º: –°–∞—Ä—ã –º–∞–π ‚Äî 1800 —Ç–≥</li>
          <li>–ï“£ –∞—Ä–∑–∞–Ω ”©–Ω—ñ–º: –ù–∞–Ω ‚Äî 150 —Ç–≥</li>
          <li>–ë—é–¥–∂–µ—Ç: 2000 —Ç–≥ ‚Üí –ù–∞–Ω, –°“Ø—Ç, “ö–∞–Ω—Ç</li>
        </ul>
      ),
    },
    {
      title:
        "2-—Ç–∞–ø—Å—ã—Ä–º–∞. –ê“õ–ø–∞—Ä–∞—Ç—Ç—ã —Ç“Ø—Å—ñ–Ω—É –∂”ô–Ω–µ —Ç–∞–ª–¥–∞—É (¬´–ï–≥–µ—Ä‚Ä¶ –æ–Ω–¥–∞‚Ä¶¬ª —Ç—ñ–∑–±–µ–≥—ñ ”ô–¥—ñ—Å—ñ)",
      description:
        "–ñ–µ“£—ñ–ª–¥—ñ–∫ –ø–µ–Ω “õ–æ—Å—ã–º—à–∞ ”©–Ω—ñ–º –∂–∞“ì–¥–∞–π—ã–Ω —Ç–∞–ª–¥–∞–ø, –µ—Å–µ–ø—Ç–µ“£—ñ–∑.",
      content: (
        <div className="mt-2 text-sm">
          <p>1. –ï–≥–µ—Ä 10% –∂–µ“£—ñ–ª–¥—ñ–∫ –±–æ–ª—Å–∞, “õ–∞–Ω—à–∞ “Ø–Ω–µ–º–¥–µ–π–¥—ñ?</p>
          <input className="w-full border rounded p-2" />
        </div>
      ),
      answer: <p>10% –∂–µ“£—ñ–ª–¥—ñ–∫ ‚Üí 450 —Ç–µ“£–≥–µ “Ø–Ω–µ–º–¥–µ–π–¥—ñ</p>,
    },
    {
      title:
        "3-—Ç–∞–ø—Å—ã—Ä–º–∞. –ê“õ–ø–∞—Ä–∞—Ç—Ç—ã “õ–æ–ª–¥–∞–Ω—É –∂”ô–Ω–µ –ø–∞–π—ã–º–¥–∞—É (¬´–°–µ–±–µ–ø-—Å–∞–ª–¥–∞—Ä–ª—ã“õ —Ç“±–∑–∞“õ—Ç–∞—Ä¬ª ”ô–¥—ñ—Å—ñ)",
      description: "–°–µ–±–µ–ø –ø–µ–Ω —Å–∞–ª–¥–∞—Ä–¥—ã –∞–Ω—ã“õ—Ç–∞.",
      content: (
        <div>
          <input className="w-full border rounded p-2" placeholder="–°–µ–±–µ–ø..." />
          <input className="w-full border rounded p-2 mt-2" placeholder="–°–∞–ª–¥–∞—Ä..." />
        </div>
      ),
      answer: (
        <ul className="list-disc ml-5">
          <li>–°–µ–±–µ–ø: –ë–∞“ì–∞–ª–∞—Ä–¥—ã —Å–∞–ª—ã—Å—Ç—ã—Ä–¥—ã–º ‚Üí –°–∞–ª–¥–∞—Ä: –µ“£ —Ç–∏—ñ–º–¥—ñ—Å—ñ–Ω —Ç–∞“£–¥–∞–¥—ã–º.</li>
        </ul>
      ),
    },
    {
      title: "4-—Ç–∞–ø—Å—ã—Ä–º–∞. –ü—Ä–∞–∫—Ç–∏–∫–∞–ª—ã“õ “õ–æ–ª–¥–∞–Ω—É (¬´–ö–æ–º–ø–∞—Å¬ª ”ô–¥—ñ—Å—ñ –∞—Ä“õ—ã–ª—ã)",
      description: "”®–∑ —á–µ–≥—ñ“£—ñ–∑–¥—ñ –∑–µ—Ä—Ç—Ç–µ–ø, –∫–æ–º–ø–∞—Å —Å—ã–∑–±–∞—Å—ã–Ω —Ç–æ–ª—Ç—ã—Ä—ã“£—ã–∑.",
      content: (
        <div className="grid grid-cols-2 gap-2">
          <input className="border rounded p-2" placeholder="N (–ú–∞“õ—Å–∞—Ç)" />
          <input className="border rounded p-2" placeholder="S (“ö–∞–∑—ñ—Ä–≥—ñ –∂–∞“ì–¥–∞–π)" />
          <input className="border rounded p-2" placeholder="W (”ò—Ä–µ–∫–µ—Ç—Ç–µ—Ä)" />
          <input className="border rounded p-2" placeholder="E (–ö–µ–¥–µ—Ä–≥—ñ–ª–µ—Ä)" />
        </div>
      ),
      answer: (
        <ul className="list-disc ml-5">
          <li>N ‚Äî –ú–∞“õ—Å–∞—Ç: –ë–∞“ì–∞ —Ç–∞–ª–¥–∞—É</li>
          <li>S ‚Äî “ö–∞–∑—ñ—Ä–≥—ñ –∂–∞“ì–¥–∞–π: –ß–µ–∫—Ç–µ —Ç–µ–∫ –∞—Ç–∞—É–ª–∞—Ä –±–∞—Ä</li>
        </ul>
      ),
    },
  ];

  if (loading) return <p className="text-center mt-10">–ñ“Ø–∫—Ç–µ–ª—ñ–ø –∂–∞—Ç—ã—Ä...</p>;

  return (
    <div className="max-w-4xl mx-auto p-6">
      <h1 className="text-2xl font-bold text-center mb-6">
        üßæ –ß–µ–∫ –±–æ–π—ã–Ω—à–∞ –æ“õ—É —Å–∞—É–∞—Ç—Ç—ã–ª—ã“ì—ã —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä—ã
      </h1>

      {tasks.map((task, index) => {
        const key = `${pageId}-${index}`;
        return (
          <div
            key={key}
            className="border rounded-2xl mb-4 shadow-sm overflow-hidden"
          >
            <button
              onClick={() => toggleTask(index)}
              className={`w-full text-left px-5 py-3 font-semibold flex justify-between items-center ${
                completed[key]
                  ? "bg-green-100 hover:bg-green-200"
                  : "bg-gray-100 hover:bg-gray-200"
              }`}
            >
              <span>
                {task.title}
                {completed[key] && (
                  <span className="ml-2 text-green-600 font-bold">‚úÖ</span>
                )}
              </span>
            </button>

            {openTask === index && (
              <div className="p-5">
                <p className="text-gray-700 text-sm">{task.description}</p>
                <div className="mt-3">{task.content}</div>

                <button
                  onClick={() => handleCheck(index)}
                  className="mt-4 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
                >
                  –¢–µ–∫—Å–µ—Ä—É
                </button>

                {showAnswer[key] && (
                  <div className="mt-4 p-3 border-l-4 border-green-500 bg-green-50">
                    <p className="font-semibold mb-1">–î“±—Ä—ã—Å –∂–∞—É–∞–ø “Ø–ª–≥—ñ—Å—ñ:</p>
                    {task.answer}
                  </div>
                )}
              </div>
            )}
          </div>
        );
      })}

      <div className="flex justify-center gap-4 mt-8">
        <button
          onClick={handleClick}
          className="bg-gray-700 text-white px-6 py-2 rounded-lg hover:bg-gray-800 transition"
        >
          üîÑ –¢–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä–¥—ã –∂–∞“£–∞—Ä—Ç—É
        </button>

        <button
          onClick={handleResetResults}
          className="bg-red-600 text-white px-6 py-2 rounded-lg hover:bg-red-700 transition"
        >
          üßπ –ù”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ —Ç–∞–∑–∞—Ä—Ç—É
        </button>
      </div>
    </div>
  );
}
